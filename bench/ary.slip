; TODO range()
; TODO tuple return

(macro for (init cond update body) caller_env
    #(with_env env caller_env
        #(env init)
        (while #(env cond)
            #(env body)
            #(env update))))

(macro for_range (it lo hi body) caller_env
    #(with_env env caller_env
        (var cur #(env lo))
        (var end #(env hi))
        #(bind env it cur)
        (while (lt? cur end)
            #(env body)
            (set! cur (add #(env it) 1)))))

(func ary (n:int): void ;(tuple int int)
  (var x:(array_heap int))
  (resize x n)
  (for_range i 0 n
    (put! x i (add i 1)))
  (var y:(array_heap int))
  (resize y n)
  (for_range i 0 n
    (put! y i 0))
  (for_range k 0 1000
    (for (var i (sub n 1)) (lt? -1 i) (set! i (sub i 1))
      (put! y i (add (at y i) (at x i)))))
  (puti (at y 0))
  (puti (at y (sub n 1)))
  )

;(func ary (n:int): void ;(tuple int int)
;  (var x:(array_heap int) (range 1 (add n 1)))
;  (var y:(array_heap int) (zeros n))
;  (foreach var k (range 0 1000)
;        (foreach var i (range (sub n 1) -1 -1))
;            (put! y i (add (at y i) (at x i)))))))
;  (puti (at y 0))
;  (puti (at y (sub n 1)))
;  )

(func main (args:(array_view string)):int
    (var n (if (lt? (size args) 2) 100 (atoi (at args 1))))
    (puti n)
    (ary n)
    0)
