; TODO for loop scope
; TODO range()
; TODO tuple return


(macro for (init cond update body) env (begin
    (var inner (make_env env))
    (expand init inner)
    (while (expand cond inner)
        (expand body inner)
        (expand update inner))))

(func ary (n:int): void ;(tuple int int)
  (var x:(array_heap int))
  (resize x n)
  (for (var i 0) (lt? i n) (set! i (add i 1))
    (put! x i (add i 1)))
  (var y:(array_heap int))
  (resize y n)
  (for (var i 0) (lt? i n) (set! i (add i 1))
    (put! y i 0))
  (for (var k 0) (lt? k 1000) (set! k (add k 1))
    (for (var i (sub n 1)) (lt? (sub 0 1) i) (set! i (sub i 1))
      (put! y i (add (at y i) (at x i)))))
  (puti (at y 0))
  (puti (at y (sub n 1)))
  )

;(func ary (n:int): void ;(tuple int int)
;  (var x:(array_heap int) (range 1 (add n 1)))
;  (var y:(array_heap int) (zeros n))
;  (foreach var k (range 0 1000)
;        (foreach var i (range (sub n 1) -1 -1))
;            (put! y i (add (at y i) (at x i)))))))
;  (puti (at y 0))
;  (puti (at y (sub n 1)))
;  )

(func main (args:(array_view string)):int
    (var n (if (lt? (size args) 2) 100 (atoi (at args 1))))
    (puti n)
    (ary n)
    0)
