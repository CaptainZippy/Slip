; TODO range()
; TODO tuple return

;(coro countup (lo:int hi:int step:int):int
;    (var cur lo)
;    (while (lt? cur hi)
;      (yield cur)
;      (set! cur (sub cur step))))


(macro for_up (it lo hi body) env
    (var cur (expand lo env))
    (var end (expand hi env))
    #(bind env it cur)
    (while (lt? cur end)
        (expand body env)
        (set! cur (add cur 1))))

;(macro for_down2 (it lo hi body) env
;    (var cur (sub #[env hi] 1))
;    (var end #[env lo])
;    #(env.bind it cur)
;    (while (ge? cur end)
;        #[env body]
;        (set! cur (sub cur 1))))

(macro for_down (it lo hi body) env
    (var cur (sub (expand hi env) 1))
    (var end (expand lo env))
    #(bind env it cur)
    (while (ge? cur end)
        (expand body env)
        (set! cur (sub cur 1))))

(func ary (n:int): void ;(tuple int int)
  (var x:(array_heap int))
  (resize x n)
  (for_up j 0 n
    (put! x j (add j 1)))

  (var y:(array_heap int))
  (resize y n)
  (for_up i 0 n
    (put! y i 0))

  (for_up k 0 1000
    (for_down i n 0
      (put! y i (add (at y i) (at x i)))))

  (puti (at y 0))
  (puti (at y (sub n 1)))
  )

;(func ary (n:int): void ;(tuple int int)
;  (var x:(array_heap int) (range 1 (add n 1)))
;  (var y:(array_heap int) (zeros n))
;  (foreach var k (range 0 1000)
;        (foreach var i (range (sub n 1) -1 -1))
;            (put! y i (add (at y i) (at x i)))))))
;  (puti (at y 0))
;  (puti (at y (sub n 1)))
;  )

(func main (args:(array_view string)):int
    (var n (catch (pipe (get args 1) (parsei)) 100))
    (puti n)
    (ary n)
    0)
