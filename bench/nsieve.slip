; ; TODO Buffers
; 
; (define if (vau (c t f) e
;     (cond ((evsym c e) (evsym t e))
;         (true (evsym f e)))))
;
(func nsieve (n:int):int n )

; (define nsieve (lambda (m) (begin
;     (let ((is_prime (vec_new m))
;           (count (add_i 0 0))) (begin
;         (for i (range m) (vec_set! is_prime i true))
;         (for i (range 2 m)
;             (if (vec_idx is_prime i)
;                 (begin
;                     (inc! count)
;                     (for k (range (mul_i i 2) m i)
;                         (vec_set! is_prime k false)))
;                 0))
;         count)))))
;

(macro for_up (it lo hi body) env
    (var cur (expand lo env))
    (var end (expand hi env))
    #(bind env it cur)
    (while (lt? cur end)
        (expand body env)
        (set! cur (add cur 1))))

(func main (args:(array_view string)) : int
    (let m (catch (pipe (get args 1) (parsei)) 100))
    (for_up i 0 3 (begin
        (let n (bitops.asl 10000 (sub m i)))
        (puti m)
        (puti (nsieve n)))))
;        (print #(fmt "Primes up to {m} {nsieve n}")))))
