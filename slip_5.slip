
(define quote (vau (expr) env expr))
(define comp (wrap comp1))

(func ackermann (m n)
  (cond
    ((eq? m 0)
     (plus n 1))
    ((eq? n 0)
     (ackermann (sub m 1) 1))
    (1 (ackermann
        (sub m 1)
        (ackermann m (sub n 1))))))

(func main (args)
  (func aux (lst)
    (let ((n (first lst)))
      (print "Ack(3," n ")" (ackermann 3 n))))
  (if (list? args)
    (aux args)
    (printf "Usage: <N>")))

(func partial1 (lam arg)
  (lambda (x) (lam arg x)))

(define ack3 (partial1 ackermann 3))
;(print (ackermann 3 2))
;(print (ack3 1))
;(print (ack3 2))
;(print (ack3 3))
(func dp (x)
  (print "<" x ":" (type x) ">" )
  x)


(func atoi (s)
  (func aux (acc s)
    (if (empty? s)
     acc
     (aux
        (plus (mul 10 acc)
          (chr (first s)))
        (rest s))))
  (aux 0 s))


(map
  (lambda (x) (dp (atoi x)))
  argv)

(map
  (lambda (x) (print x (ack3 (atoi x))))
  argv)

1
